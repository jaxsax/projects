// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Links", testLinks)
	t.Run("SkippedLinks", testSkippedLinks)
	t.Run("Updates", testUpdates)
}

func TestDelete(t *testing.T) {
	t.Run("Links", testLinksDelete)
	t.Run("SkippedLinks", testSkippedLinksDelete)
	t.Run("Updates", testUpdatesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Links", testLinksQueryDeleteAll)
	t.Run("SkippedLinks", testSkippedLinksQueryDeleteAll)
	t.Run("Updates", testUpdatesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Links", testLinksSliceDeleteAll)
	t.Run("SkippedLinks", testSkippedLinksSliceDeleteAll)
	t.Run("Updates", testUpdatesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Links", testLinksExists)
	t.Run("SkippedLinks", testSkippedLinksExists)
	t.Run("Updates", testUpdatesExists)
}

func TestFind(t *testing.T) {
	t.Run("Links", testLinksFind)
	t.Run("SkippedLinks", testSkippedLinksFind)
	t.Run("Updates", testUpdatesFind)
}

func TestBind(t *testing.T) {
	t.Run("Links", testLinksBind)
	t.Run("SkippedLinks", testSkippedLinksBind)
	t.Run("Updates", testUpdatesBind)
}

func TestOne(t *testing.T) {
	t.Run("Links", testLinksOne)
	t.Run("SkippedLinks", testSkippedLinksOne)
	t.Run("Updates", testUpdatesOne)
}

func TestAll(t *testing.T) {
	t.Run("Links", testLinksAll)
	t.Run("SkippedLinks", testSkippedLinksAll)
	t.Run("Updates", testUpdatesAll)
}

func TestCount(t *testing.T) {
	t.Run("Links", testLinksCount)
	t.Run("SkippedLinks", testSkippedLinksCount)
	t.Run("Updates", testUpdatesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Links", testLinksHooks)
	t.Run("SkippedLinks", testSkippedLinksHooks)
	t.Run("Updates", testUpdatesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Links", testLinksInsert)
	t.Run("Links", testLinksInsertWhitelist)
	t.Run("SkippedLinks", testSkippedLinksInsert)
	t.Run("SkippedLinks", testSkippedLinksInsertWhitelist)
	t.Run("Updates", testUpdatesInsert)
	t.Run("Updates", testUpdatesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Links", testLinksReload)
	t.Run("SkippedLinks", testSkippedLinksReload)
	t.Run("Updates", testUpdatesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Links", testLinksReloadAll)
	t.Run("SkippedLinks", testSkippedLinksReloadAll)
	t.Run("Updates", testUpdatesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Links", testLinksSelect)
	t.Run("SkippedLinks", testSkippedLinksSelect)
	t.Run("Updates", testUpdatesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Links", testLinksUpdate)
	t.Run("SkippedLinks", testSkippedLinksUpdate)
	t.Run("Updates", testUpdatesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Links", testLinksSliceUpdateAll)
	t.Run("SkippedLinks", testSkippedLinksSliceUpdateAll)
	t.Run("Updates", testUpdatesSliceUpdateAll)
}
