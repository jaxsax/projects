// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUpdates(t *testing.T) {
	t.Parallel()

	query := Updates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUpdatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpdatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Updates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpdatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UpdateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpdatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UpdateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Update exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpdateExists to return true, but got false.")
	}
}

func testUpdatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	updateFound, err := FindUpdate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if updateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUpdatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Updates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUpdatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Updates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpdatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	updateOne := &Update{}
	updateTwo := &Update{}
	if err = randomize.Struct(seed, updateOne, updateDBTypes, false, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}
	if err = randomize.Struct(seed, updateTwo, updateDBTypes, false, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = updateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = updateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Updates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpdatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	updateOne := &Update{}
	updateTwo := &Update{}
	if err = randomize.Struct(seed, updateOne, updateDBTypes, false, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}
	if err = randomize.Struct(seed, updateTwo, updateDBTypes, false, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = updateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = updateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func updateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func updateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Update) error {
	*o = Update{}
	return nil
}

func testUpdatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Update{}
	o := &Update{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, updateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Update object: %s", err)
	}

	AddUpdateHook(boil.BeforeInsertHook, updateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	updateBeforeInsertHooks = []UpdateHook{}

	AddUpdateHook(boil.AfterInsertHook, updateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	updateAfterInsertHooks = []UpdateHook{}

	AddUpdateHook(boil.AfterSelectHook, updateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	updateAfterSelectHooks = []UpdateHook{}

	AddUpdateHook(boil.BeforeUpdateHook, updateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	updateBeforeUpdateHooks = []UpdateHook{}

	AddUpdateHook(boil.AfterUpdateHook, updateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	updateAfterUpdateHooks = []UpdateHook{}

	AddUpdateHook(boil.BeforeDeleteHook, updateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	updateBeforeDeleteHooks = []UpdateHook{}

	AddUpdateHook(boil.AfterDeleteHook, updateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	updateAfterDeleteHooks = []UpdateHook{}

	AddUpdateHook(boil.BeforeUpsertHook, updateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	updateBeforeUpsertHooks = []UpdateHook{}

	AddUpdateHook(boil.AfterUpsertHook, updateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	updateAfterUpsertHooks = []UpdateHook{}
}

func testUpdatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpdatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(updateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpdatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUpdatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UpdateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUpdatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Updates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	updateDBTypes = map[string]string{`ID`: `BIGINT`, `Data`: `TEXT`}
	_             = bytes.MinRead
)

func testUpdatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(updatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(updateAllColumns) == len(updatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, updateDBTypes, true, updatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUpdatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(updateAllColumns) == len(updatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Update{}
	if err = randomize.Struct(seed, o, updateDBTypes, true, updateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Updates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, updateDBTypes, true, updatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Update struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(updateAllColumns, updatePrimaryKeyColumns) {
		fields = updateAllColumns
	} else {
		fields = strmangle.SetComplement(
			updateAllColumns,
			updatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UpdateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
