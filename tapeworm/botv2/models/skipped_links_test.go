// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testSkippedLinksUpsert(t *testing.T) {
	t.Parallel()
	if len(skippedLinkAllColumns) == len(skippedLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SkippedLink{}
	if err = randomize.Struct(seed, &o, skippedLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SkippedLink: %s", err)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, skippedLinkDBTypes, false, skippedLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SkippedLink: %s", err)
	}

	count, err = SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSkippedLinks(t *testing.T) {
	t.Parallel()

	query := SkippedLinks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSkippedLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSkippedLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SkippedLinks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSkippedLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SkippedLinkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSkippedLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SkippedLinkExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SkippedLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SkippedLinkExists to return true, but got false.")
	}
}

func testSkippedLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	skippedLinkFound, err := FindSkippedLink(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if skippedLinkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSkippedLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SkippedLinks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSkippedLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SkippedLinks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSkippedLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	skippedLinkOne := &SkippedLink{}
	skippedLinkTwo := &SkippedLink{}
	if err = randomize.Struct(seed, skippedLinkOne, skippedLinkDBTypes, false, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}
	if err = randomize.Struct(seed, skippedLinkTwo, skippedLinkDBTypes, false, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = skippedLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = skippedLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SkippedLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSkippedLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	skippedLinkOne := &SkippedLink{}
	skippedLinkTwo := &SkippedLink{}
	if err = randomize.Struct(seed, skippedLinkOne, skippedLinkDBTypes, false, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}
	if err = randomize.Struct(seed, skippedLinkTwo, skippedLinkDBTypes, false, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = skippedLinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = skippedLinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func skippedLinkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func skippedLinkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SkippedLink) error {
	*o = SkippedLink{}
	return nil
}

func testSkippedLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SkippedLink{}
	o := &SkippedLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SkippedLink object: %s", err)
	}

	AddSkippedLinkHook(boil.BeforeInsertHook, skippedLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	skippedLinkBeforeInsertHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.AfterInsertHook, skippedLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	skippedLinkAfterInsertHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.AfterSelectHook, skippedLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	skippedLinkAfterSelectHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.BeforeUpdateHook, skippedLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	skippedLinkBeforeUpdateHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.AfterUpdateHook, skippedLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	skippedLinkAfterUpdateHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.BeforeDeleteHook, skippedLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	skippedLinkBeforeDeleteHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.AfterDeleteHook, skippedLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	skippedLinkAfterDeleteHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.BeforeUpsertHook, skippedLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	skippedLinkBeforeUpsertHooks = []SkippedLinkHook{}

	AddSkippedLinkHook(boil.AfterUpsertHook, skippedLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	skippedLinkAfterUpsertHooks = []SkippedLinkHook{}
}

func testSkippedLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSkippedLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(skippedLinkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSkippedLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSkippedLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SkippedLinkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSkippedLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SkippedLinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	skippedLinkDBTypes = map[string]string{`ID`: `INTEGER`, `ErrorReason`: `VARCHAR(512)`, `Link`: `VARCHAR(1024)`}
	_                  = bytes.MinRead
)

func testSkippedLinksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(skippedLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(skippedLinkAllColumns) == len(skippedLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSkippedLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(skippedLinkAllColumns) == len(skippedLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SkippedLink{}
	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SkippedLinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, skippedLinkDBTypes, true, skippedLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SkippedLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(skippedLinkAllColumns, skippedLinkPrimaryKeyColumns) {
		fields = skippedLinkAllColumns
	} else {
		fields = strmangle.SetComplement(
			skippedLinkAllColumns,
			skippedLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SkippedLinkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
